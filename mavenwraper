<!DOCTYPE html>
<html lang="en" 
<head>
<meta charset="ISO-8859-1">
<title>Employee Management System</title>
<link rel="stylesheet"
	href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
	integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
	crossorigin="anonymous">
</head>
<body onload="getEmp()">
	<div class="container">
		<h2>Update</h2>
		<hr>

		<form action="#" 
			method="POST">
			<input type="text" 
				placeholder="ID" class="form-control mb-4 col-4">

				<input type="id" 
				placeholder="Employee First Name" class="form-control mb-4 col-4">

				<input type="text" 
				placeholder="Last name" class="form-control mb-4 col-4">

				<input type="text" 
				placeholder="Employement ID" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Start Date" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Designation" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Department" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="End Date" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="DOB" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Status" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Reporting Manager" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Gender" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Blood Group" class="form-control mb-4 col-4"> 
				<input type="text" 
				placeholder="Address" class="form-control mb-4 col-4">

				<button type="submit" class="btn btn-info col-2" onclick=""> SAVE</button><br><br>
				<input type="button" value="Back" class="btn btn-info col-2" onclick="window.location.href='new_employee.html';">
		</form>

		<hr>

		<a href = "@{/}"> Back to Employee List</a>
	</div>
	<script>
		function getEmp() {
		let http= new XMLHttpRequest();


		//decrypting using same key
		var id= localStorage.getItem("data")^658;
		console.log(id);

			if(id==null || id=="")
			{
				alert("Please Enter Id for retreive");
				return;
			}

			var url="http://localhost:8080/findemp";
			http.open('GET', url, true);

			//Send the proper header information along with the request
			http.setRequestHeader( 'Access-Control-Allow-Origin', '*');
			http.setRequestHeader('Content-type', 'application/json');
			http.setRequestHeader("id",id);



			http.onreadystatechange = function() {//Call a function when the state changes.
				if( http.readyState == 4 && (http.status == 200 || http.status==400) ){
					if(http.status==400)
					{
						alert("Employee not found");
						return;
					}


					var data=JSON.parse(http.response);

					document.getElementById("ID").innerHTML=data.id;
					document.getElementById("firstName").innerHTML=data.firstname;
					document.getElementById("lastName").innerHTML=data.lastname;
					document.getElementById("EmpID").innerHTML= data.employeeid;
					document.getElementById("start").innerHTML=data.startdate ;
					document.getElementById("designation").innerHTML=data.designation;
					document.getElementById("department").innerHTML= data.departement;
					document.getElementById("end").innerHTML= data.enddate;
					document.getElementById("dob").innerHTML=data.dob;
					document.getElementById("status").innerHTML=data.status;
					document.getElementById("reporting").innerHTML=data.reportingmanager;
					document.getElementById("gender").innerHTML=data.gender;
					document.getElementById("blood").innerHTML=data.blood;
					document.getElementById("address").innerHTML=data.address;
					console.log(data.id);

				}
			}

			http.send();


		  //document.getElementById("demo").innerHTML = x;
		  //alert(data.departement);	
		}




		// function CreateEmp() {


		// }
		</script>
</body>
</html> 
 113  Repo-main/ICF.postman_collection.json 

{
	"variables": [],
	"info": {
		"name": "ICF",
		"_postman_id": "af1278fc-4689-32ea-6cbf-0f4dd0a4dd77",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "localhost:8080/addemp",
			"request": {
				"url": "localhost:8080/updateemp",
				"method": "PUT",
				"header": [
					{
						"key": "id",
						"value": "123",
						"description": "",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"147\",\n    \"firstname\": \"Steve\",\n    \"lastname\": \"Rogers\",\n    \"employeeid\": null,\n    \"startdate\": \"2015-02-12\",\n    \"designation\": \"developer\",\n    \"departement\": \"GlobalTech\",\n    \"enddate\": null,\n    \"status\": \"working\",\n    \"dob\": \"1994-12-25\",\n    \"reportingmanager\": \"Thor\",\n    \"gender\": \"M\",\n    \"bloodgroup\": \"b+ve\",\n    \"address\": \"stark towers\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "localhost:8080/findemp",
			"request": {
				"url": "localhost:8080/findemp",
				"method": "GET",
				"header": [
					{
						"key": "id",
						"value": "125",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"124\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Wick\",\n    \"employeeId\": \"456\",\n    \"startDate\": null,\n    \"designation\": \"developer\",\n    \"departement\": \"GlobalTech\",\n    \"enddate\": null,\n    \"status\": \"working\",\n    \"dob\": \"1994-12-25\",\n    \"reportingManager\": null,\n    \"gender\": \"M\",\n    \"bloodgroup\": \"b+ve\",\n    \"address\": \"stark towers\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "localhost:8080/addemp",
			"request": {
				"url": "localhost:8080/addemp",
				"method": "POST",
				"header": [
					{
						"key": "id",
						"value": "123",
						"description": "",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"124\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Wick\",\n    \"employeeId\": \"456\",\n    \"startDate\": null,\n    \"designation\": \"developer\",\n    \"departement\": \"GlobalTech\",\n    \"enddate\": null,\n    \"status\": \"working\",\n    \"dob\": \"1994-12-25\",\n    \"reportingManager\": null,\n    \"gender\": \"M\",\n    \"bloodgroup\": \"b+ve\",\n    \"address\": \"stark towers\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "localhost:8080/deleteemp",
			"request": {
				"url": "localhost:8080/deleteemp",
				"method": "DELETE",
				"header": [
					{
						"key": "id",
						"value": "147",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"124\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Wick\",\n    \"employeeId\": \"456\",\n    \"startDate\": null,\n    \"designation\": \"developer\",\n    \"departement\": \"GlobalTech\",\n    \"enddate\": null,\n    \"status\": \"working\",\n    \"dob\": \"1994-12-25\",\n    \"reportingManager\": null,\n    \"gender\": \"M\",\n    \"bloodgroup\": \"b+ve\",\n    \"address\": \"stark towers\"\n}"
				},
				"description": ""
			},
			"response": []
		}
	]
} 


create database if not exists icf;
use icf;
drop table if exists Dependents;
drop table if exists EducationalQualification;
drop table if exists Employee ;

create table Employee
(id varchar(10) primary key, firstname varchar(30),lastname varchar(30),
employeeid varchar(10) not null, startdate date,designation varchar(30), departement varchar(20),
enddate date,status varchar(20),dob date,reportingmanager varchar(30), gender varchar(1),
bloodgroup varchar(6), address varchar(50)
);
create table Dependents
( id varchar(10), firstname varchar(30), lastname varchar(30), gender varchar(1), dob date,
relationship varchar(20),
foreign key (id) references Employee(id)
);

create table EducationalQualification
 ( id varchar(10),type varchar(10), startdate date,enddate date,Institution varchar(30),
 address varchar(50), percentage float(3,2)
 check(percentage<=100),
 foreign key (id) references Employee(id)
 );

 insert into Employee values
 ("123","John","Wick","789","2015-02-12",
 "developer","GlobalTech",null,"working","1994-12-25",
 "Thor","M","b+ve","stark towers");
  insert into Employee values
 ("124","Tony","Stark","789","2017-02-12",
 "developer","InterSys","2020-12-24","released","1994-12-25",
 "Hulk","M","o+ve","avenger towers");
   insert into Employee values
 ("125","Black","Widow","789","2020-02-12",
 "developer","InterSys","2020-12-24","onboarded","1994-12-25",
 "Thor","M","ab+ve","sea towers");

 select * from Employee;



<!DOCTYPE html>
<html lang="en" 
<head>
<meta charset="ISO-8859-1">
<title>Employee Management System</title>
<link rel="stylesheet"
	href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
	integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
	crossorigin="anonymous">
</head>
<body>
	<div class="container">
		<h2>Employee</h2>
		<hr>

		<form 
			method="POST">
			<input type="text" 
				placeholder="ID" id="ID" class="form-control mb-4 col-4">

				<input type="text" 
				placeholder="Employee First Name" id="firstName" class="form-control mb-4 col-4">

				<input type="text" 
				placeholder="Last name" id ="lastName" class="form-control mb-4 col-4">

				<input type="text" 
				placeholder="Employement ID" id="EmpID" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Start Date" id="start" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Designation" id="designation" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Department" id="department"class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="End Date" id="end" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="DOB" id="dob" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Status" id="status" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Reporting Manager" id="reporting" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Gender" id="gender" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Blood Group" id="blood" class="form-control mb-4 col-4">
				<input type="text" 
				placeholder="Address" id="address" class="form-control mb-4 col-4">


				<button type="button" onClick="CreateEmp()" class="btn btn-info col-2"> Create</button><br><br>
				<input type="text"  id="options"
				placeholder="ID" class="form-control mb-4 col-4">

				<input type="button" class="btn btn-info col-2" onclick="findEmp()" value="Retrive">
				<input type="button" value="update" class="btn btn-info col-2" onclick="updatestoreEmp()">
				<input  type="button" class="btn btn-info col-2" onclick="deleteEmp()" value="Delete">
		</form>

		<hr>
		<hr>

		<a href = "@{/}"> Back to Employee List</a>
	</div>
	<script>

			function CreateEmp() {
			let http= new XMLHttpRequest();
			 var Employee=new Object();
			   Employee.id = document.getElementById("ID").value;
			   Employee.firstname = document.getElementById("firstName").value;
			   Employee.lastname = document.getElementById("lastName").value;
			   Employee.employeeid = document.getElementById("EmpID").value;
			   Employee.startdate = document.getElementById("start").value;
			   Employee.designation = document.getElementById("designation").value;
			   Employee.departement = document.getElementById("department").value;
			   Employee.enddate = document.getElementById("end").value;
			   Employee.dob = document.getElementById("dob").value;
			   Employee.status = document.getElementById("status").value;
			   Employee.reportingmanager = document.getElementById("reporting").value;
			   Employee.gender = document.getElementById("gender").value;
			   Employee.bloodgroup= document.getElementById("blood").value;
			   Employee.address = document.getElementById("address").value;
			  console.log(Employee.id);

			  for(x in Employee){
				  if(Employee[x]=="")
				  		Employee[x]=null;
			  }


			  var url="http://localhost:8080/addemp";
			  http.open('POST', url, true);

				//Send the proper header information along with the request
				http.setRequestHeader( 'Access-Control-Allow-Origin', '*');
				http.setRequestHeader('Content-type', 'application/json');

				http.onreadystatechange = function() {//Call a function when the state changes.
					if( http.readyState == 4 && (http.status == 200 || http.status==400) ){
						alert(http.responseText);
					}
				}
				http.send(JSON.stringify(Employee));

			  //document.getElementById("demo").innerHTML = x;
			}

			function deleteEmp() {

				var id = document.getElementById("options").value;
				if(id==null || id=="")
				{
					alert("Please Enter Id for delete");
					return;
				}
				let http= new XMLHttpRequest();

				var url="http://localhost:8080/deleteemp";
			    http.open('DELETE', url, true);

				//Send the proper header information along with the request
				http.setRequestHeader( 'Access-Control-Allow-Origin', '*');
				http.setRequestHeader('Content-type', 'application/json');
				http.setRequestHeader("id",id);

				http.onreadystatechange = function() {//Call a function when the state changes.
					if( http.readyState == 4 && (http.status == 200 || http.status==400) ){
						alert(http.responseText);
					}
				}
				http.send();

			}

			function findEmp() {

				var id = document.getElementById("options").value;
				if(id==null || id=="")
				{
					alert("Please Enter Id for retreive");
					return;
				}
				let http= new XMLHttpRequest();

				var url="http://localhost:8080/findemp";
			    http.open('GET', url, true);

				//Send the proper header information along with the request
				http.setRequestHeader( 'Access-Control-Allow-Origin', '*');
				http.setRequestHeader('Content-type', 'application/json');
				http.setRequestHeader("id",id);

				http.onreadystatechange = function() {//Call a function when the state changes.
					if( http.readyState == 4 && (http.status == 200 || http.status==400) ){
						if(http.status==400)
						{
							alert("Employee not found");
							return;
						}
						var data=JSON.parse(http.response);

						alert("Employee Found \n Name:  "+data.firstname+" "+data.lastname+
							"\n Designation:  "+data.designation +"\n Departement:  "+data.departement);
					}
				}
				http.send();
			}


			function updatestoreEmp() {

				var id = document.getElementById("options").value;

				if(id==null || id=="")
				{
					alert("Please Enter Id for retreive");
					return;
				}

				// simple encryption using xor operation

				localStorage.setItem("data",id^658);
				window.location.href="EmpUpdate.html";
			}



			</script>
</body>
</html> 
 33  demo/.gitignore 
@@ -0,0 +1,33 @@
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

import java.net.*;
import java.io.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
     * use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
            ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH =
            ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}
